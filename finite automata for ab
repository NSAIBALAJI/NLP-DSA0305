class DFA:
    def __init__(self, states, alphabet, transition_function, start_state, accept_states):
        self.states = states
        self.alphabet = alphabet
        self.transition_function = transition_function
        self.start_state = start_state
        self.accept_states = accept_states
    def accepts(self, string):
        current_state = self.start_state
        for symbol in string:
            if symbol in self.alphabet:
                current_state = self.transition_function[current_state][symbol]
            else:
                return False
        return current_state in self.accept_states
states = {'q0', 'q1', 'q2'}
alphabet = {'a', 'b'}
transition_function = {
    'q0': {'a': 'q1', 'b': 'q0'},
    'q1': {'a': 'q1', 'b': 'q2'},
    'q2': {'a': 'q1', 'b': 'q2'}
}
start_state = 'q0'
accept_states = {'q2'}
dfa = DFA(states, alphabet, transition_function, start_state, accept_states)
strings = ['', 'a', 'b', 'aa', 'ab', 'ba', 'aaa', 'aab', 'aba', 'abb', 'b', 'bb', 'baa', 'bab', 'bba', 'bbb']
for string in strings:
    if dfa.accepts(string):
        print(f"{string} ends with 'ab'")
    else:
        print(f"{string} does not end with 'ab'")
